{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Danny\\\\farmingBlog\\\\src\\\\pages\\\\BlogPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useContextAuth } from '../../contexts/AuthContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BlogPage = () => {\n  _s();\n  const {\n    user\n  } = useContextAuth();\n  const [posts, setPosts] = useState([]);\n  const [comments, setComments] = useState([]);\n  const [newComment, setNewComment] = useState(\"\");\n  useEffect(() => {\n    // Fetch posts and comments from an API or a mock data source\n    const fetchPosts = async () => {\n      // Replace with actual API call\n      const fetchedPosts = [{\n        id: 1,\n        author: \"dannydo@test.com\",\n        title: \"My First Blog Post\",\n        content: \"This is the content of my first post.\"\n      }, {\n        id: 2,\n        author: \"someoneelse@test.com\",\n        title: \"A Second Post\",\n        content: \"Here's the content of a second post.\"\n      }];\n      setPosts(fetchedPosts);\n    };\n    const fetchComments = async () => {\n      // Replace with actual API call\n      const fetchedComments = [{\n        postId: 1,\n        user: \"dannydo@test.com\",\n        comment: \"Great post!\",\n        id: 1\n      }, {\n        postId: 1,\n        user: \"someoneelse@test.com\",\n        comment: \"I agree, nice read.\",\n        id: 2\n      }];\n      setComments(fetchedComments);\n    };\n    fetchPosts();\n    fetchComments();\n  }, []);\n  const handleAddComment = postId => {\n    if (newComment.trim()) {\n      const newCommentObj = {\n        postId: postId,\n        user: user.email,\n        comment: newComment,\n        id: comments.length + 1 // For simplicity, we just use the length of comments as the new ID\n      };\n      setComments([...comments, newCommentObj]);\n      setNewComment(\"\"); // Clear the input field after adding a comment\n    }\n  };\n  const handleDeleteComment = commentId => {\n    setComments(comments.filter(comment => comment.id !== commentId));\n  };\n  const handleEditComment = (commentId, newText) => {\n    setComments(comments.map(comment => comment.id === commentId ? {\n      ...comment,\n      comment: newText\n    } : comment));\n  };\n  const handleDeletePost = postId => {\n    setPosts(posts.filter(post => post.id !== postId));\n  };\n  const handleEditPost = (postId, newContent) => {\n    setPosts(posts.map(post => post.id === postId ? {\n      ...post,\n      content: newContent\n    } : post));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"blog-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Blog Page\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 4\n    }, this), posts.map(post => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"post\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: post.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 6\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: post.content\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 6\n      }, this), user && user.email === post.author && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"post-actions\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleEditPost(post.id, \"New content here...\"),\n          children: \"Edit Post\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 8\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleDeletePost(post.id),\n          children: \"Delete Post\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 8\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"comments\",\n        children: comments.filter(comment => comment.postId === post.id).map(comment => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"comment\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: [comment.user, \":\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 105,\n              columnNumber: 13\n            }, this), \" \", comment.comment]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 10\n          }, this), user && user.email === comment.user && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"comment-actions\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => handleEditComment(comment.id, \"Updated comment text\"),\n              children: \"Edit Comment\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 110,\n              columnNumber: 12\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => handleDeleteComment(comment.id),\n              children: \"Delete Comment\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 115,\n              columnNumber: 12\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 11\n          }, this)]\n        }, comment.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 9\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 6\n      }, this), user && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"add-comment\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: newComment,\n          onChange: e => setNewComment(e.target.value),\n          placeholder: \"Add a comment\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 8\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleAddComment(post.id),\n          children: \"Submit Comment\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 8\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 7\n      }, this)]\n    }, post.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 5\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 3\n  }, this);\n};\n_s(BlogPage, \"vUN3rp8wSNy92ZEh+y4v7i+N48Y=\", false, function () {\n  return [useContextAuth];\n});\n_c = BlogPage;\nexport default BlogPage;\nvar _c;\n$RefreshReg$(_c, \"BlogPage\");","map":{"version":3,"names":["React","useState","useEffect","useContextAuth","jsxDEV","_jsxDEV","BlogPage","_s","user","posts","setPosts","comments","setComments","newComment","setNewComment","fetchPosts","fetchedPosts","id","author","title","content","fetchComments","fetchedComments","postId","comment","handleAddComment","trim","newCommentObj","email","length","handleDeleteComment","commentId","filter","handleEditComment","newText","map","handleDeletePost","post","handleEditPost","newContent","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","type","value","onChange","e","target","placeholder","_c","$RefreshReg$"],"sources":["C:/Users/Danny/farmingBlog/src/pages/BlogPage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useContextAuth } from '../../contexts/AuthContext';\r\n\r\nconst BlogPage = () => {\r\n\tconst { user } = useContextAuth();\r\n\tconst [posts, setPosts] = useState([]);\r\n\tconst [comments, setComments] = useState([]);\r\n\tconst [newComment, setNewComment] = useState(\"\");\r\n\r\n\tuseEffect(() => {\r\n\t\t// Fetch posts and comments from an API or a mock data source\r\n\t\tconst fetchPosts = async () => {\r\n\t\t\t// Replace with actual API call\r\n\t\t\tconst fetchedPosts = [\r\n\t\t\t\t{\r\n\t\t\t\t\tid: 1,\r\n\t\t\t\t\tauthor: \"dannydo@test.com\",\r\n\t\t\t\t\ttitle: \"My First Blog Post\",\r\n\t\t\t\t\tcontent: \"This is the content of my first post.\",\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tid: 2,\r\n\t\t\t\t\tauthor: \"someoneelse@test.com\",\r\n\t\t\t\t\ttitle: \"A Second Post\",\r\n\t\t\t\t\tcontent: \"Here's the content of a second post.\",\r\n\t\t\t\t}\r\n\t\t\t];\r\n\t\t\tsetPosts(fetchedPosts);\r\n\t\t};\r\n\r\n\t\tconst fetchComments = async () => {\r\n\t\t\t// Replace with actual API call\r\n\t\t\tconst fetchedComments = [\r\n\t\t\t\t{ postId: 1, user: \"dannydo@test.com\", comment: \"Great post!\", id: 1 },\r\n\t\t\t\t{ postId: 1, user: \"someoneelse@test.com\", comment: \"I agree, nice read.\", id: 2 },\r\n\t\t\t];\r\n\t\t\tsetComments(fetchedComments);\r\n\t\t};\r\n\r\n\t\tfetchPosts();\r\n\t\tfetchComments();\r\n\t}, []);\r\n\r\n\tconst handleAddComment = (postId) => {\r\n\t\tif (newComment.trim()) {\r\n\t\t\tconst newCommentObj = {\r\n\t\t\t\tpostId: postId,\r\n\t\t\t\tuser: user.email,\r\n\t\t\t\tcomment: newComment,\r\n\t\t\t\tid: comments.length + 1, // For simplicity, we just use the length of comments as the new ID\r\n\t\t\t};\r\n\t\t\tsetComments([...comments, newCommentObj]);\r\n\t\t\tsetNewComment(\"\"); // Clear the input field after adding a comment\r\n\t\t}\r\n\t};\r\n\r\n\tconst handleDeleteComment = (commentId) => {\r\n\t\tsetComments(comments.filter((comment) => comment.id !== commentId));\r\n\t};\r\n\r\n\tconst handleEditComment = (commentId, newText) => {\r\n\t\tsetComments(\r\n\t\t\tcomments.map((comment) =>\r\n\t\t\t\tcomment.id === commentId ? { ...comment, comment: newText } : comment\r\n\t\t\t)\r\n\t\t);\r\n\t};\r\n\r\n\tconst handleDeletePost = (postId) => {\r\n\t\tsetPosts(posts.filter((post) => post.id !== postId));\r\n\t};\r\n\r\n\tconst handleEditPost = (postId, newContent) => {\r\n\t\tsetPosts(\r\n\t\t\tposts.map((post) =>\r\n\t\t\t\tpost.id === postId ? { ...post, content: newContent } : post\r\n\t\t\t)\r\n\t\t);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div className=\"blog-page\">\r\n\t\t\t<h2>Blog Page</h2>\r\n\t\t\t{posts.map((post) => (\r\n\t\t\t\t<div key={post.id} className=\"post\">\r\n\t\t\t\t\t<h3>{post.title}</h3>\r\n\t\t\t\t\t<p>{post.content}</p>\r\n\r\n\t\t\t\t\t{/* Display the edit and delete buttons only for the author of the post */}\r\n\t\t\t\t\t{user && user.email === post.author && (\r\n\t\t\t\t\t\t<div className=\"post-actions\">\r\n\t\t\t\t\t\t\t<button onClick={() => handleEditPost(post.id, \"New content here...\")}>\r\n\t\t\t\t\t\t\t\tEdit Post\r\n\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t<button onClick={() => handleDeletePost(post.id)}>Delete Post</button>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t)}\r\n\r\n\t\t\t\t\t{/* Display comments */}\r\n\t\t\t\t\t<div className=\"comments\">\r\n\t\t\t\t\t\t{comments\r\n\t\t\t\t\t\t\t.filter((comment) => comment.postId === post.id)\r\n\t\t\t\t\t\t\t.map((comment) => (\r\n\t\t\t\t\t\t\t\t<div key={comment.id} className=\"comment\">\r\n\t\t\t\t\t\t\t\t\t<p><strong>{comment.user}:</strong> {comment.comment}</p>\r\n\r\n\t\t\t\t\t\t\t\t\t{/* Edit and Delete buttons for the comment owner */}\r\n\t\t\t\t\t\t\t\t\t{user && user.email === comment.user && (\r\n\t\t\t\t\t\t\t\t\t\t<div className=\"comment-actions\">\r\n\t\t\t\t\t\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\t\t\t\t\t\tonClick={() => handleEditComment(comment.id, \"Updated comment text\")}\r\n\t\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t\tEdit Comment\r\n\t\t\t\t\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t\t\t\t\t<button onClick={() => handleDeleteComment(comment.id)}>\r\n\t\t\t\t\t\t\t\t\t\t\t\tDelete Comment\r\n\t\t\t\t\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t{/* Allow users to add a comment */}\r\n\t\t\t\t\t{user && (\r\n\t\t\t\t\t\t<div className=\"add-comment\">\r\n\t\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\t\t\tvalue={newComment}\r\n\t\t\t\t\t\t\t\tonChange={(e) => setNewComment(e.target.value)}\r\n\t\t\t\t\t\t\t\tplaceholder=\"Add a comment\"\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t<button onClick={() => handleAddComment(post.id)}>Submit Comment</button>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t)}\r\n\t\t\t\t</div>\r\n\t\t\t))}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default BlogPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}